#+TITLE:       Emacs Settings
#+EMAIL:       soonho.kong@gmail.com
#+STARTUP:     odd fold
#+LANGUAGE:    en
#+OPTIONS:     skip:nil toc:nil
#+HTML_HEAD:   <link rel="publisher" href="https://www.cs.cmu.edu/~soonhok" />

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Soonho Kong"
	user-mail-address "soonho.kong@gmail.com")
#+END_SRC

* Platform-dependent
** macOS
*** Map command/option/control
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  (setq mac-control-modifier 'control)
#+END_SRC
*** "ls does not support --dired; see ‘dired-use-ls-dired’ for more details."
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+END_SRC
*** Lion-style Fullscreen
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq ns-use-native-fullscreen nil))
#+END_SRC
** Linux
*** Fullscreen
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      (progn
	(defun toggle-fullscreen (&optional f)
	  (interactive)
	  (let ((current-value (frame-parameter nil 'fullscreen)))
	    (set-frame-parameter nil 'fullscreen
				 (if (equal 'fullboth current-value)
				     (if (boundp 'old-fullscreen) old-fullscreen nil)
				   (progn (setq old-fullscreen current-value)
					  'fullboth)))))
	(global-set-key [(ctrl f2)] 'toggle-fullscreen)
	(add-hook 'after-make-frame-functions 'toggle-fullscreen)))
#+END_SRC
* Basics
** Display Time
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-use-mail-icon t)
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-locale-environment "en.UTF-8")
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC
** Use PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))
#+END_SRC
** Fonts
  Use [[https://github.com/nathco/Office-Code-Pro][Office Code Pro]].
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :family "Office Code Pro"
		      :height 150
		      :weight 'normal
		      :width 'normal)

#+END_SRC
** Unicode Font Setup
#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :config (unicode-fonts-setup))
#+END_SRC
** Backup Files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
** Turn off newbie stuff
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq wdired-allow-to-change-permissions t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq dabbrev-case-distinction nil)
  (setq dabbrev-case-fold-search nil)
  (setq echo-keystrokes 0.1)
  (setq delete-active-region nil)
  (column-number-mode t)
  (transient-mark-mode t)
  (global-font-lock-mode t)

  (setq font-lock-maximum-decoration t)
  (setq font-lock-maximum-size nil)
  (setq display-time-24hr-format t)
#+END_SRC
** Matching Parens
From https://www.gnu.org/software/emacs/manual/html_node/efaq/Matching-parentheses.html
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (global-set-key "%" 'match-paren)
  (defun match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
	  ((looking-at "\\s)") (forward-char 1) (backward-list 1))
	  (t (self-insert-command (or arg 1)))))
#+END_SRC
** Color Theme
#+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :init
     (load-theme 'doom-one t)
     :config
     ;; Global settings (defaults)
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	   doom-themes-enable-italic t) ; if nil, italics is universally disabled
     (setq doom-one-brighter-comments t)

     ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config)

     ;; Enable custom neotree theme (all-the-icons must be installed!)
     (doom-themes-neotree-config)
     ;; or for treemacs users
     (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
     (doom-themes-treemacs-config)

     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config))

   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq doom-modeline-python-executable nil))

#+END_SRC

** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-p" . 'ace-window)
    :config
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-background t)
  )
#+END_SRC

** Diminish
#+BEGIN_SRC
(use-package diminish)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC
** Whitespace Cleanup
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :init (ws-butler-global-mode)
    :config (setq ws-butler-keep-whitespace-before-point nil))
#+END_SRC
** Global unsets
#+BEGIN_SRC emacs-lisp
;; M-` invokes tmm-menubar; disable it.
(global-unset-key "\M-`")
#+END_SRC
** Bind M-` to other-frame
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (global-set-key (kbd "M-`") 'other-frame))
#+END_SRC
** Input method
#+BEGIN_SRC emacs-lisp
  (setq default-input-method 'TeX)
#+END_SRC
** Mouse
#+BEGIN_SRC emacs-lisp
  ;; (xterm-mouse-mode t)
#+END_SRC
** Weather
#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :config
    (setq wttrin-default-cities
	  '("Cambridge MA"
	    "Arlington MA"
	    "Los Altos CA"
	    "Seoul Korea")))
#+END_SRC
** Auto package update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update)
#+END_SRC
* Useful emacs-lisp libraries
#+BEGIN_SRC emacs-lisp
  (use-package dash)
  (use-package f)
#+END_SRC
* Terminal
From http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :config
      (setq multi-term-program "zsh"))
  (add-hook 'term-mode-hook
	    (lambda ()
	      (setq term-buffer-maximum-size 10000)))
  (defcustom term-unbind-key-list
    '("C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
    "The key list that will need to be unbind."
    :type 'list
    :group 'multi-term)

  (defcustom term-bind-key-alist
    '(
      ("C-c C-c" . term-interrupt-subjob)
      ("C-p" . previous-line)
      ("C-n" . next-line)
      ("C-s" . isearch-forward)
      ("C-r" . isearch-backward)
      ("C-m" . term-send-raw)
      ("M-f" . term-send-forward-word)
      ("M-b" . term-send-backward-word)
      ("M-o" . term-send-backspace)
      ("M-p" . term-send-up)
      ("M-n" . term-send-down)
      ("M-M" . term-send-forward-kill-word)
      ("M-N" . term-send-backward-kill-word)
      ("M-r" . term-send-reverse-search-history)
      ("M-," . term-send-input)
      ("M-." . comint-dynamic-complete))
    "The key alist that will need to be bind.
  If you do not like default setup, modify it, with (KEY . COMMAND) format."
    :type 'alist
    :group 'multi-term)
  (add-hook 'term-mode-hook
	    (lambda ()
	      (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
	      (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))))
  (add-hook 'term-mode-hook
	    (lambda ()
	      (define-key term-raw-map (kbd "C-y") 'term-paste)))
  (defun buffer-exists (bufname) (not (eq nil (get-buffer bufname))))

  (defun soonho-visor-style-terminal ()
    (interactive)
    (let ((name_of_terminal_buffer "*terminal<1>*"))
      (if (buffer-exists name_of_terminal_buffer)
	  ;; If the terminal buffer exists
	  (if (string= (buffer-name) name_of_terminal_buffer)
	      ;; and we are in the terminal buffer
	      ;; then move to the previous buffer
	      (previous-buffer)
	    ;; otherwise, switch to terminal buffer (move to the other
	    ;; frame in the buffer is there, instead of creating one in
	    ;; the current frame!
	    (switch-to-buffer name_of_terminal_buffer)
	    )
	;; If the terminal buffer doesn't exist, create one
	(multi-term)
	)))
  (global-set-key (kbd "M-`") 'soonho-visor-style-terminal)
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish ivy-mode counsel-mode
    :bind (("C-s"   . swiper-isearch)
	   ("C-r"   . swiper-isearch-backward)
	   ("s-f"   . swiper)
	   ("C-S-s" . swiper-all)

	   ("C-c C-r" . ivy-resume)
	   ("C-c v p" . ivy-push-view)
	   ("C-c v o" . ivy-pop-view)
	   ("C-c v ." . ivy-switch-view)

	   :map counsel-mode-map
	   ([remap swiper] . counsel-grep-or-swiper)
	   ([remap swiper-backward] . counsel-grep-or-swiper-backward)
	   ([remap dired] . counsel-dired)
	   ([remap set-variable] . counsel-set-variable)
	   ([remap insert-char] . counsel-unicode-char)
	   ([remap recentf-open-files] . counsel-recentf)

	   ("C-x j"   . counsel-mark-ring)
	   ("C-h F"   . counsel-faces)

	   ("C-c B" . counsel-bookmarked-directory)
	   ("C-c L" . counsel-load-library)
	   ("C-c O" . counsel-find-file-extern)
	   ("C-c P" . counsel-package)
	   ("C-c R" . counsel-list-processes)
	   ("C-c f" . counsel-find-library)
	   ("C-c g" . counsel-grep)
	   ("C-c h" . counsel-command-history)
	   ("C-c i" . counsel-git)
	   ("C-c j" . counsel-git-grep)
	   ("C-c l" . counsel-locate)
	   ("C-c o" . counsel-outline)
	   ("C-c r" . counsel-rg)
	   ("C-c z" . counsel-fzf)

	   ("C-c c B" . counsel-bookmarked-directory)
	   ("C-c c F" . counsel-faces)
	   ("C-c c L" . counsel-load-library)
	   ("C-c c O" . counsel-find-file-extern)
	   ("C-c c P" . counsel-package)
	   ("C-c c R" . counsel-list-processes)
	   ("C-c c a" . counsel-apropos)
	   ("C-c c e" . counsel-colors-emacs)
	   ("C-c c f" . counsel-find-library)
	   ("C-c c g" . counsel-grep)
	   ("C-c c h" . counsel-command-history)
	   ("C-c c i" . counsel-git)
	   ("C-c c j" . counsel-git-grep)
	   ("C-c c l" . counsel-locate)
	   ("C-c c m" . counsel-minibuffer-history)
	   ("C-c c o" . counsel-outline)
	   ("C-c c p" . counsel-pt)
	   ("C-c c r" . counsel-rg)
	   ("C-c c s" . counsel-ag)
	   ("C-c c t" . counsel-load-theme)
	   ("C-c c u" . counsel-unicode-char)
	   ("C-c c w" . counsel-colors-web)
	   ("C-c c v" . counsel-set-variable)
	   ("C-c c z" . counsel-fzf)

	   :map ivy-minibuffer-map
	   ("C-w" . ivy-yank-word)
	   ("C-j" . ivy-immediate-done)
	   ("RET" . ivy-alt-done)
	   ("<left>" . ivy-backward-delete-char)
	   ("<right>" . ivy-alt-done)

	   :map counsel-find-file-map
	   ("C-h" . counsel-up-directory)

	   :map swiper-map
	   ("M-s" . swiper-isearch-toggle)
	   ("M-%" . swiper-query-replace)

	   :map isearch-mode-map
	   ("M-s" . swiper-isearch-toggle))
    :hook ((after-init . ivy-mode)
	   (ivy-mode . counsel-mode))
    :init
    (setq enable-recursive-minibuffers t) ; Allow commands in minibuffers

    (setq ivy-use-selectable-prompt t
	  ivy-use-virtual-buffers t    ; Enable bookmarks and recentf
	  ivy-height 10
	  ivy-fixed-height-minibuffer t
	  ivy-count-format "(%d/%d) "
	  ivy-on-del-error-function nil
	  ivy-initial-inputs-alist nil)

    ;; Better performance on Windows
    (when sys/win32p
      (setq ivy-dynamic-exhibit-delay-ms 200))

    (setq swiper-action-recenter t)

    (setq counsel-find-file-at-point t
	  counsel-yank-pop-separator "\n────────\n")

    ;; Use the faster search tool: ripgrep (`rg')
    (when (executable-find "rg")
      (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never %s %s")
      (when (and sys/macp (executable-find "gls"))
	(setq counsel-find-file-occur-use-find nil
	      counsel-find-file-occur-cmd
	      "gls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 gls -d --group-directories-first")))
    :config
    (with-no-warnings
      ;; Display an arrow with the selected item
      (defun my-ivy-format-function-arrow (cands)
	"Transform CANDS into a string for minibuffer."
	(ivy--format-function-generic
	 (lambda (str)
	   (concat (if (icons-displayable-p)
		       (all-the-icons-octicon "chevron-right" :height 0.8 :v-adjust -0.05)
		     ">")
		   (propertize " " 'display `(space :align-to 2))
		   (ivy--add-face str 'ivy-current-match)))
	 (lambda (str)
	   (concat (propertize " " 'display `(space :align-to 2)) str))
	 cands
	 "\n"))
      ;; (setf (alist-get 't ivy-format-functions-alist) #'my-ivy-format-function-arrow)

      ;; Pre-fill search keywords
      ;; @see https://www.reddit.com/r/emacs/comments/b7g1px/withemacs_execute_commands_like_marty_mcfly/
      (defvar my-ivy-fly-commands
	'(query-replace-regexp
	  flush-lines keep-lines ivy-read
	  swiper swiper-backward swiper-all
	  swiper-isearch swiper-isearch-backward
	  lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol
	  counsel-grep-or-swiper counsel-grep-or-swiper-backward
	  counsel-grep counsel-ack counsel-ag counsel-rg counsel-pt))
      (defvar-local my-ivy-fly--travel nil)

      (defun my-ivy-fly-back-to-present ()
	(cond ((and (memq last-command my-ivy-fly-commands)
		    (equal (this-command-keys-vector) (kbd "M-p")))
	       ;; repeat one time to get straight to the first history item
	       (setq unread-command-events
		     (append unread-command-events
			     (listify-key-sequence (kbd "M-p")))))
	      ((or (memq this-command '(self-insert-command
					ivy-forward-char end-of-line mwim-end-of-line
					mwim-end-of-code-or-line mwim-end-of-line-or-code
					yank ivy-yank-word counsel-yank-pop))
		   (equal (this-command-keys-vector) (kbd "M-n")))
	       (unless my-ivy-fly--travel
		 (delete-region (point) (point-max))
		 (when (memq this-command '(ivy-forward-char
					    end-of-line mwim-end-of-line
					    mwim-end-of-code-or-line
					    mwim-end-of-line-or-code ))
		   (insert (ivy-cleanup-string ivy-text)))
		 (setq my-ivy-fly--travel t)))))

      (defun my-ivy-fly-time-travel ()
	(when (memq this-command my-ivy-fly-commands)
	  (let* ((kbd (kbd "M-n"))
		 (cmd (key-binding kbd))
		 (future (and cmd
			      (with-temp-buffer
				(when (ignore-errors
					(call-interactively cmd) t)
				  (buffer-string))))))
	    (when future
	      (save-excursion
		(insert (propertize (replace-regexp-in-string
				     "\\\\_<" ""
				     (replace-regexp-in-string
				      "\\\\_>" ""
				      future))
				    'face 'shadow)))
	      (add-hook 'pre-command-hook 'my-ivy-fly-back-to-present nil t)))))

      (add-hook 'minibuffer-setup-hook #'my-ivy-fly-time-travel)
      (add-hook 'minibuffer-exit-hook
		(lambda ()
		  (remove-hook 'pre-command-hook 'my-ivy-fly-back-to-present t)))

      ;;
      ;; Improve search experience of `swiper' and `counsel'
      ;;
      (defun my-ivy-switch-to-swiper (&rest _)
	"Switch to `swiper' with the current input."
	(swiper ivy-text))

      (defun my-ivy-switch-to-swiper-isearch (&rest _)
	"Switch to `swiper-isearch' with the current input."
	(swiper-isearch ivy-text))

      (defun my-ivy-switch-to-swiper-all (&rest _)
	"Switch to `swiper-all' with the current input."
	(swiper-all ivy-text))

      (defun my-ivy-switch-to-rg-dwim (&rest _)
	"Switch to `rg-dwim' with the current input."
	(rg-dwim default-directory))

      (defun my-ivy-switch-to-counsel-rg (&rest _)
	"Switch to `counsel-rg' with the current input."
	(counsel-rg ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-git-grep (&rest _)
	"Switch to `counsel-git-grep' with the current input."
	(counsel-git-grep ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-find-file (&rest _)
	"Switch to `counsel-find-file' with the current input."
	(counsel-find-file ivy-text))

      (defun my-ivy-switch-to-counsel-fzf (&rest _)
	"Switch to `counsel-fzf' with the current input."
	(counsel-fzf ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-git (&rest _)
	"Switch to `counsel-git' with the current input."
	(counsel-git ivy-text))

      ;; @see https://emacs-china.org/t/swiper-swiper-isearch/9007/12
      (defun my-swiper-toggle-counsel-rg ()
	"Toggle `counsel-rg' and `swiper'/`swiper-isearch' with the current input."
	(interactive)
	(ivy-quit-and-run
	  (if (memq (ivy-state-caller ivy-last) '(swiper swiper-isearch))
	      (my-ivy-switch-to-counsel-rg)
	    (my-ivy-switch-to-swiper-isearch))))
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg swiper-map)
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg counsel-ag-map)

      (with-eval-after-load 'rg
	(defun my-swiper-toggle-rg-dwim ()
	  "Toggle `rg-dwim' with the current input."
	  (interactive)
	  (ivy-quit-and-run
	    (rg-dwim default-directory)))
	(bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
	(bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map))

      (defun my-swiper-toggle-swiper-isearch ()
	"Toggle `swiper' and `swiper-isearch' with the current input."
	(interactive)
	(ivy-quit-and-run
	  (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
	      (swiper ivy-text)
	    (swiper-isearch ivy-text))))
      (bind-key "<s-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

      (defun my-counsel-find-file-toggle-fzf ()
	"Toggle `counsel-fzf' with the current `counsel-find-file' input."
	(interactive)
	(ivy-quit-and-run
	  (counsel-fzf (or ivy-text "") default-directory)))
      (bind-key "<C-return>" #'my-counsel-find-file-toggle-fzf counsel-find-file-map)

      (defun my-swiper-toggle-rg-dwim ()
	"Toggle `rg-dwim' with the current input."
	(interactive)
	(ivy-quit-and-run (my-ivy-switch-to-rg-dwim)))
      (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
      (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map)

      (defun my-swiper-toggle-swiper-isearch ()
	"Toggle `swiper' and `swiper-isearch' with the current input."
	(interactive)
	(ivy-quit-and-run
	  (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
	      (my-ivy-switch-to-swiper)
	    (my-ivy-switch-to-swiper-isearch))))
      (bind-key "<s-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

      ;; More actions
      (ivy-add-actions
       'swiper-isearch
       '(("r" my-ivy-switch-to-counsel-rg "rg")
	 ("d" my-ivy-switch-to-rg-dwim "rg dwim")
	 ("s" my-ivy-switch-to-swiper "swiper")
	 ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       'swiper
       '(("r" my-ivy-switch-to-counsel-rg "rg")
	 ("d" my-ivy-switch-to-rg-dwim "rg dwim")
	 ("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
	 ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       'swiper-all
       '(("g" my-ivy-switch-to-counsel-git-grep "git grep")
	 ("r" my-ivy-switch-to-counsel-rg "rg")
	 ("d" my-ivy-switch-to-rg-dwim "rg dwim")
	 ("s" my-swiper-toggle-swiper-isearch "swiper isearch")
	 ("S" my-ivy-switch-to-swiper "swiper")))

      (ivy-add-actions
       'counsel-rg
       '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
	 ("S" my-ivy-switch-to-swiper "swiper")
	 ("a" my-ivy-switch-to-swiper-all "swiper all")
	 ("d" my-ivy-switch-to-rg-dwim "rg dwim")))

      (ivy-add-actions
       'counsel-git-grep
       '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
	 ("S" my-ivy-switch-to-swiper "swiper")
	 ("r" my-ivy-switch-to-rg-dwim "rg")
	 ("d" my-ivy-switch-to-rg-dwim "rg dwim")
	 ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       'counsel-find-file
       '(("g" my-ivy-switch-to-counsel-git "git")
	 ("z" my-ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       'counsel-git
       '(("f" my-ivy-switch-to-counsel-find-file "find file")
	 ("z" my-ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       'counsel-fzf
       '(("f" my-ivy-switch-to-counsel-find-file "find file")
	 ("g" my-ivy-switch-to-counsel-git "git")))

      ;; Integration with `projectile'
      (with-eval-after-load 'projectile
	(setq projectile-completion-system 'ivy))

      ;; Integration with `magit'
      (with-eval-after-load 'magit
	(setq magit-completing-read-function 'ivy-completing-read)))

    ;; Enhance M-x
    (use-package amx
      :init (setq amx-history-length 20))

    ;; Better sorting and filtering
    (use-package prescient
      :commands prescient-persist-mode
      :init
      (setq prescient-filter-method '(literal regexp initialism fuzzy))
      (prescient-persist-mode 1))

    (use-package ivy-prescient
      :commands ivy-prescient-re-builder
      :custom-face
      (ivy-minibuffer-match-face-1 ((t (:inherit font-lock-doc-face :foreground nil))))
      :init
      (defun ivy-prescient-non-fuzzy (str)
	"Generate an Ivy-formatted non-fuzzy regexp list for the given STR.
      This is for use in `ivy-re-builders-alist'."
	(let ((prescient-filter-method '(literal regexp)))
	  (ivy-prescient-re-builder str)))

      (setq ivy-prescient-retain-classic-highlighting t
	    ivy-re-builders-alist
	    '((counsel-ag . ivy-prescient-non-fuzzy)
	      (counsel-rg . ivy-prescient-non-fuzzy)
	      (counsel-pt . ivy-prescient-non-fuzzy)
	      (counsel-grep . ivy-prescient-non-fuzzy)
	      (counsel-imenu . ivy-prescient-non-fuzzy)
	      (counsel-yank-pop . ivy-prescient-non-fuzzy)
	      (swiper . ivy-prescient-non-fuzzy)
	      (swiper-isearch . ivy-prescient-non-fuzzy)
	      (swiper-all . ivy-prescient-non-fuzzy)
	      (lsp-ivy-workspace-symbol . ivy-prescient-non-fuzzy)
	      (lsp-ivy-global-workspace-symbol . ivy-prescient-non-fuzzy)
	      (insert-char . ivy-prescient-non-fuzzy)
	      (counsel-unicode-char . ivy-prescient-non-fuzzy)
	      (t . ivy-prescient-re-builder))
	    ivy-prescient-sort-commands
	    '(:not swiper swiper-isearch ivy-switch-buffer
		   counsel-grep counsel-git-grep counsel-ag counsel-imenu
		   counsel-yank-pop counsel-recentf counsel-buffer-or-recentf))

      (ivy-prescient-mode 1))

    ;; Additional key bindings for Ivy
    (use-package ivy-hydra
      :commands ivy-hydra-read-action
      :init (setq ivy-read-action-function #'ivy-hydra-read-action))

    ;; Ivy integration for Projectile
    (use-package counsel-projectile
      :hook (counsel-mode . counsel-projectile-mode)
      :init (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point)))

    ;; Integrate yasnippet
    (use-package ivy-yasnippet
      :commands ivy-yasnippet--preview
      :bind ("C-c C-y" . ivy-yasnippet)
      :config (advice-add #'ivy-yasnippet--preview :override #'ignore))

    ;; Select from xref candidates with Ivy
    (use-package ivy-xref
      :init
      (when (boundp 'xref-show-definitions-function)
	(setq xref-show-definitions-function #'ivy-xref-show-defs))
      (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

    ;; Correcting words with flyspell via Ivy
    (use-package flyspell-correct-ivy
      :after flyspell
      :bind (:map flyspell-mode-map
		  ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper))
      :init (setq flyspell-correct-interface #'flyspell-correct-ivy))

    ;; Quick launch apps
    (cond
     (sys/linux-x-p
      (bind-key "s-<f6>" #'counsel-linux-app counsel-mode-map))
     (sys/macp
      (use-package counsel-osx-app
	:bind (:map counsel-mode-map
		    ("s-<f6>" . counsel-osx-app)))))

    ;; Display world clock using Ivy
    (use-package counsel-world-clock
      :bind (:map counsel-mode-map
		  ("C-c c k" . counsel-world-clock)))

    ;; Tramp ivy interface
    (use-package counsel-tramp
      :bind (:map counsel-mode-map
		  ("C-c c T" . counsel-tramp)))

    ;; Support pinyin in Ivy
    ;; Input prefix ':' to match pinyin
    ;; Refer to  https://github.com/abo-abo/swiper/issues/919 and
    ;; https://github.com/pengpengxp/swiper/wiki/ivy-support-chinese-pinyin
    (use-package pinyinlib
      :commands pinyinlib-build-regexp-string
      :init
      (with-no-warnings
	(defun ivy--regex-pinyin (str)
	  "The regex builder wrapper to support pinyin."
	  (or (pinyin-to-utf8 str)
	      (and (fboundp 'ivy-prescient-non-fuzzy)
		   (ivy-prescient-non-fuzzy str))
	      (ivy--regex-plus str)))

	(defun my-pinyinlib-build-regexp-string (str)
	  "Build a pinyin regexp sequence from STR."
	  (cond ((equal str ".*") ".*")
		(t (pinyinlib-build-regexp-string str t))))

	(defun my-pinyin-regexp-helper (str)
	  "Construct pinyin regexp for STR."
	  (cond ((equal str " ") ".*")
		((equal str "") nil)
		(t str)))

	(defun pinyin-to-utf8 (str)
	  "Convert STR to UTF-8."
	  (cond ((equal 0 (length str)) nil)
		((equal (substring str 0 1) "!")
		 (mapconcat
		  #'my-pinyinlib-build-regexp-string
		  (remove nil (mapcar
			       #'my-pinyin-regexp-helper
			       (split-string
				(replace-regexp-in-string "!" "" str )
				"")))
		  ""))
		(t nil)))

	(mapcar
	 (lambda (item)
	   (let ((key (car item))
		 (value (cdr item)))
	     (when (member value '(ivy-prescient-non-fuzzy
				   ivy--regex-plus))
	       (setf (alist-get key ivy-re-builders-alist)
		     #'ivy--regex-pinyin))))
	 ivy-re-builders-alist))))

  ;; More friendly display transformer for Ivy
  (use-package ivy-rich
    :hook ((counsel-projectile-mode . ivy-rich-mode) ; Must load after `counsel-projectile'
	   (ivy-rich-mode . (lambda ()
			      (setq ivy-virtual-abbreviate
				    (or (and ivy-rich-mode 'abbreviate) 'name)))))
    :init
    ;; For better performance
    (setq ivy-rich-parse-remote-buffer nil)

    ;; Setting tab size to 1, to insert tabs as delimiters
    (add-hook 'minibuffer-setup-hook
	      (lambda ()
		(setq tab-width 1)))

    (with-no-warnings
      (defun ivy-rich-bookmark-name (candidate)
	(car (assoc candidate bookmark-alist)))

      (defun ivy-rich-buffer-icon (candidate)
	"Display buffer icons in `ivy-rich'."
	(when (icons-displayable-p)
	  (let* ((buffer (get-buffer candidate))
		 (buffer-file-name (buffer-file-name buffer))
		 (major-mode (buffer-local-value 'major-mode buffer))
		 (icon (with-current-buffer buffer (all-the-icons-icon-for-buffer))))
	    (if (symbolp icon)
		(all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0)
	      icon))))

      (defun ivy-rich-file-icon (candidate)
	"Display file icons in `ivy-rich'."
	(when (icons-displayable-p)
	  (let* ((path (concat ivy--directory candidate))
		 (file (file-name-nondirectory path))
		 (icon (cond
			((file-directory-p path)
			 (all-the-icons-icon-for-dir path nil ""))
			((string-match "^/.*:$" path)
			 (all-the-icons-octicon "radio-tower" :height 1.0 :v-adjust 0.01))
			((not (string-empty-p file))
			 (all-the-icons-icon-for-file file :v-adjust -0.05)))))
	    (if (symbolp icon)
		(all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0)
	      icon))))

      (defun ivy-rich-project-icon (_candidate)
	"Display project icons in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-octicon "file-directory" :height 1.0 :v-adjust 0.01)))

      (defun ivy-rich-mode-icon (_candidate)
	"Display mode icons in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-blue)))

      (defun ivy-rich-function-icon (_candidate)
	"Display function icons in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple)))

      (defun ivy-rich-variable-icon (_candidate)
	"Display the variable icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue)))

      (defun ivy-rich-symbol-icon (_candidate)
	"Display the symbol icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-octicon "gear" :height 0.9 :v-adjust -0.05)))

      (defun ivy-rich-theme-icon (_candidate)
	"Display the theme icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-material "palette" :height 1.0 :v-adjust -0.2)))

      (defun ivy-rich-keybinding-icon (_candidate)
	"Display the keybindings icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-material "keyboard" :height 0.9 :v-adjust -0.15)))

      (defun ivy-rich-library-icon (_candidate)
	"Display the library icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-material "view_module" :height 1.0 :v-adjust -0.225 :face 'all-the-icons-lblue)))

      (defun ivy-rich-package-icon (_candidate)
	"Display the package icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-silver)))

      (defun ivy-rich-font-icon (_candidate)
	"Display the font icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "font" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (defun ivy-rich-world-clock-icon (_candidate)
	"Display the world clock icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "globe" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (defun ivy-rich-tramp-icon (_candidate)
	"Display the tramp icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-octicon "radio-tower" :height 0.9 :v-adjust 0.01)))

      (defun ivy-rich-git-branch-icon (_candidate)
	"Display the git branch icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-octicon "git-branch" :height 1.0 :v-adjust -0.05 :face 'all-the-icons-green)))

      (defun ivy-rich-process-icon (_candidate)
	"Display the process icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (all-the-icons-faicon "bolt" :height 1.0 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (defun ivy-rich-imenu-icon (candidate)
	"Display the imenu icon in `ivy-rich'."
	(when (icons-displayable-p)
	  (let ((case-fold-search nil))
	    (cond
	     ((string-match-p "Type Parameters?[:)]" candidate)
	      (all-the-icons-faicon "arrows" :height 0.85 :v-adjust -0.05))
	     ((string-match-p "\\(Variables?\\)\\|\\(Fields?\\)\\|\\(Parameters?\\)[:)]" candidate)
	      (all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue))
	     ((string-match-p "Constants?[:)]" candidate)
	      (all-the-icons-faicon "square-o" :height 0.95 :v-adjust -0.15))
	     ((string-match-p "Enum\\(erations?\\)?[:)]" candidate)
	      (all-the-icons-material "storage" :height 0.95 :v-adjust -0.2 :face 'all-the-icons-orange))
	     ((string-match-p "References?[:)]" candidate)
	      (all-the-icons-material "collections_bookmark" :height 0.95 :v-adjust -0.2))
	     ((string-match-p "\\(Types?\\)\\|\\(Property\\)[:)]" candidate)
	      (all-the-icons-faicon "wrench" :height 0.9 :v-adjust -0.05))
	     ((string-match-p "\\(Functions?\\)\\|\\(Methods?\\)\\|\\(Constructors?\\)[:)]" candidate)
	      (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple))
	     ((string-match-p "\\(Class\\)\\|\\(Structs?\\)[:)]" candidate)
	      (all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange))
	     ((string-match-p "Interfaces?[:)]" candidate)
	      (all-the-icons-material "share" :height 0.95 :v-adjust -0.2 :face 'all-the-icons-lblue))
	     ((string-match-p "Modules?[:)]" candidate)
	      (all-the-icons-material "view_module" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
	     ((string-match-p "Packages?[:)]" candidate)
	      (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-silver))
	     (t (all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.125))))))

      (when (icons-displayable-p)
	(defun my-ivy-rich-bookmark-type (candidate)
	  (let ((filename (ivy-rich-bookmark-filename candidate)))
	    (cond ((null filename)
		   (all-the-icons-material "block" :height 1.0 :v-adjust -0.2 :face 'warning))  ; fixed #38
		  ((file-remote-p filename)
		   (all-the-icons-octicon "radio-tower" :height 0.9 :v-adjust 0.01))
		  ((not (file-exists-p filename))
		   (all-the-icons-material "block" :height 1.0 :v-adjust -0.2 :face 'error))
		  ((file-directory-p filename)
		   (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust -0.05))
		  (t (all-the-icons-icon-for-file (file-name-nondirectory filename) :height 0.9 :v-adjust -0.05)))))
	(advice-add #'ivy-rich-bookmark-type :override #'my-ivy-rich-bookmark-type)))

    (setq ivy-rich-display-transformers-list
	  '(ivy-switch-buffer
	    (:columns
	     ((ivy-rich-buffer-icon)
	      (ivy-rich-candidate (:width 30))
	      (ivy-rich-switch-buffer-size (:width 7))
	      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	      (ivy-rich-switch-buffer-project (:width 15 :face success))
	      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	     :predicate
	     (lambda (cand) (get-buffer cand))
	     :delimiter "\t")
	    ivy-switch-buffer-other-window
	    (:columns
	     ((ivy-rich-buffer-icon)
	      (ivy-rich-candidate (:width 30))
	      (ivy-rich-switch-buffer-size (:width 7))
	      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	      (ivy-rich-switch-buffer-project (:width 15 :face success))
	      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	     :predicate
	     (lambda (cand) (get-buffer cand))
	     :delimiter "\t")
	    counsel-switch-buffer
	    (:columns
	     ((ivy-rich-buffer-icon)
	      (ivy-rich-candidate (:width 30))
	      (ivy-rich-switch-buffer-size (:width 7))
	      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	      (ivy-rich-switch-buffer-project (:width 15 :face success))
	      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	     :predicate
	     (lambda (cand) (get-buffer cand))
	     :delimiter "\t")
	    counsel-switch-buffer-other-window
	    (:columns
	     ((ivy-rich-buffer-icon)
	      (ivy-rich-candidate (:width 30))
	      (ivy-rich-switch-buffer-size (:width 7))
	      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	      (ivy-rich-switch-buffer-project (:width 15 :face success))
	      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	     :predicate
	     (lambda (cand) (get-buffer cand))
	     :delimiter "\t")
	    persp-switch-to-buffer
	    (:columns
	     ((ivy-rich-buffer-icon)
	      (ivy-rich-candidate (:width 30))
	      (ivy-rich-switch-buffer-size (:width 7))
	      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	      (ivy-rich-switch-buffer-project (:width 15 :face success))
	      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	     :predicate
	     (lambda (cand) (get-buffer cand))
	     :delimiter "\t")
	    counsel-M-x
	    (:columns
	     ((ivy-rich-function-icon)
	      (counsel-M-x-transformer (:width 50))
	      (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
	    counsel-describe-function
	    (:columns
	     ((ivy-rich-function-icon)
	      (counsel-describe-function-transformer (:width 50))
	      (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
	    counsel-describe-variable
	    (:columns
	     ((ivy-rich-variable-icon)
	      (counsel-describe-variable-transformer (:width 50))
	      (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
	    counsel-set-variable
	    (:columns
	     ((ivy-rich-variable-icon)
	      (counsel-describe-variable-transformer (:width 50))
	      (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
	    counsel-apropos
	    (:columns
	     ((ivy-rich-symbol-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-info-lookup-symbol
	    (:columns
	     ((ivy-rich-symbol-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-descbinds
	    (:columns
	     ((ivy-rich-keybinding-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-find-file
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-read-file-transformer))
	     :delimiter "\t")
	    counsel-file-jump
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-dired
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-read-file-transformer))
	     :delimiter "\t")
	    counsel-dired-jump
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-el
	    (:columns
	     ((ivy-rich-symbol-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-fzf
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-git
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-recentf
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate (:width 0.8))
	      (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
	     :delimiter "\t")
	    counsel-buffer-or-recentf
	    (:columns
	     ((ivy-rich-file-icon)
	      (counsel-buffer-or-recentf-transformer (:width 0.8))
	      (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
	     :delimiter "\t")
	    counsel-bookmark
	    (:columns
	     ((ivy-rich-bookmark-type)
	      (ivy-rich-bookmark-name (:width 40))
	      (ivy-rich-bookmark-info))
	     :delimiter "\t")
	    counsel-bookmarked-directory
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-package
	    (:columns
	     ((ivy-rich-package-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-fonts
	    (:columns
	     ((ivy-rich-font-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-major
	    (:columns
	     ((ivy-rich-function-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-find-library
	    (:columns
	     ((ivy-rich-library-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-load-library
	    (:columns
	     ((ivy-rich-library-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-load-theme
	    (:columns
	     ((ivy-rich-theme-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-world-clock
	    (:columns
	     ((ivy-rich-world-clock-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-tramp
	    (:columns
	     ((ivy-rich-tramp-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-git-checkout
	    (:columns
	     ((ivy-rich-git-branch-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-list-processes
	    (:columns
	     ((ivy-rich-process-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-projectile-switch-project
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-projectile-find-file
	    (:columns
	     ((ivy-rich-file-icon)
	      (counsel-projectile-find-file-transformer))
	     :delimiter "\t")
	    counsel-projectile-find-dir
	    (:columns
	     ((ivy-rich-project-icon)
	      (counsel-projectile-find-dir-transformer))
	     :delimiter "\t")
	    counsel-minor
	    (:columns
	     ((ivy-rich-mode-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    counsel-imenu
	    (:columns
	     ((ivy-rich-imenu-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t")
	    treemacs-projectile
	    (:columns
	     ((ivy-rich-file-icon)
	      (ivy-rich-candidate))
	     :delimiter "\t"))))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  ;; Projectile - Project interaction library
  (use-package projectile
    :config
      (setq projectile-enable-caching t)
      (setq ffip-use-rust-fd t)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-switch-project-action 'projectile-dired)
      (add-to-list 'projectile-other-file-alist '("cc" "h")) ;; switch from cc -> h
      (add-to-list 'projectile-other-file-alist '("h" "cc"))
    :bind ("M-o" . 'projectile-find-other-file)
    :hook (after-init . projectile-mode)
    :diminish projectile-mode)
  (use-package projectile-ripgrep)
#+END_SRC
* On-the-fly Syntax Check (Flycheck)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands (flycheck-get-checker-for-buffer
	       flycheck-may-enable-mode)
    :hook (c++-mode . flycheck-mode)
    ;; Spell-check only the comment sections.
    :hook (c++-mode . flyspell-prog-mode)
    :init
      (global-flycheck-mode)
      (diminish 'flycheck-mode "fc"))
#+END_SRC
* Auto Completion (Company)
#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :requires company
    :config
    (company-flx-mode +1))

  (use-package company
    :defer t
    :bind
      (("C-<tab>" . company-complete))
    :init
      (global-company-mode)
    :config
	(set-variable 'company-idle-delay 0.1)
        ; make company-dabbrev case-sensitive
        (set-variable 'company-dabbrev-downcase nil)

    :hook (c++-mode . company-mode)
    :diminish company-mode)

#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode +1))
#+END_SRC

* GIT
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq vc-display-status nil)
    ;; full screen magit-status
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
    (setq magit-last-seen-setup-instructions "1.4.0")
    (setq magit-refresh-status-buffer nil)
    :bind
    (("C-x g" . magit-status)
     :map magit-status-mode-map
     ("q" . magit-quit-session)))
#+END_SRC
** Git Gutter
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
   (use-package git-gutter-fringe
     :ensure t
     :init (global-git-gutter-mode))
 (use-package git-gutter
  :ensure t
  :init (global-git-gutter-mode)))
#+END_SRC
* Editor Config
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :init
      (editorconfig-mode))
#+END_SRC
* Dash
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (use-package dash-at-point
      :ensure t
      :config
      (add-to-list 'dash-at-point-mode-alist '(c++-mode . "cpp"))
      (add-to-list 'dash-at-point-mode-alist '(python-mode . "python"))
      :bind (("C-c d" . dash-at-point))))
#+END_SRC
* Language-Specific
** C++
*** Basics
https://github.com/ludwigpacifici/modern-cpp-font-lock
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
#+END_SRC

Open .h files in c++-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defconst my-cc-style
    '("cc-mode"
      (indent-tabs-mode . nil)                     ; use spaces rather than tabs
      (c-basic-offset . 2)                         ; indent by four spaces
      (c-offsets-alist . ((innamespace . [0])))))  ; No indent for C++ namespaces.
  (c-add-style "my-cc-mode" my-cc-style)
  (add-hook 'c++-mode-hook '(lambda () (c-set-style "my-cc-mode")))
#+END_SRC

*** fic-mode
Show FIXME/TODO/BUG(...) in special face only in comments and strings
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :hook (c++-mode . fic-mode))
#+END_SRC
*** ELDOC
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :hook (c++-mode . eldoc-mode)
  :diminish eldoc-mode)
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    :init
    (setq lsp-keymap-prefix "s-l")
    (setq lsp-auto-guess-root t)       ; Detect project root
    (setq lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck
    (setq lsp-enable-xref t)
    (setq lsp-before-save-edits nil)
    :hook ((c++-mode . lsp)
	   (python-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :config
    ;; `-background-index' requires clangd v8+!
    (setq lsp-clients-clangd-args '("--header-insertion=iwyu"
				    "--clang-tidy"))
    :commands lsp)

  (use-package lsp-ui
    :requires lsp-mode flycheck
    :config
    (setq lsp-ui-doc-enable t
	  lsp-ui-doc-use-childframe t
	  lsp-ui-doc-position 'top
	  lsp-ui-doc-include-signature t
	  lsp-ui-sideline-enable nil
	  lsp-ui-flycheck-enable t
	  lsp-ui-flycheck-list-position 'right
	  lsp-ui-flycheck-live-reporting t
	  lsp-ui-peek-enable t
	  lsp-ui-peek-list-width 60
	  lsp-ui-peek-peek-height 25)

    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package company-lsp
    :requires company
    :config
    (push 'company-lsp company-backends)

    ;; Disable client-side cache because the LSP server does a better job.
    (setq company-transformers nil
	  company-lsp-async t
	  company-lsp-cache-candidates nil))
  (use-package lsp-ivy
    :after lsp-mode
    :bind (:map lsp-mode-map
		([remap xref-find-apropos] . lsp-ivy-workspace-symbol)
		("C-s-." . lsp-ivy-global-workspace-symbol)))
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package dap-mode)
#+END_SRC
*** company-c-headers
(use-package company-c-headers
  :ensure t)
*** Clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format)

  ;; Indent C/C++ using clang-format
  (fset 'c-indent-region 'clang-format-region)

  (use-package f)
  (defun find-file-in-parents (filename &optional dir)
    "Finds filename in parent directories and returns one if
       exists. Otherwise returns nil."
    (unless dir (setq dir (f-dirname (buffer-file-name))))
    (let ((parent (f-parent dir)))
      (unless (f-root? parent)
	(if (f-exists? (f-expand filename dir))
	    dir
	  (find-file-in-parents filename parent)))))

  (defcustom do-clang-format-buffer-on-save t
    "Run clang-format-buffer on save if there is .clang-format file in the project.")

  (defun toggle-use-clang-format()
    (interactive)
    (setq do-clang-format-buffer-on-save (not do-clang-format-buffer-on-save)))

  (defun run-clang-format-if-c++-mode-before-save-hook()
    "If the following conditions met, run git-clang-format.
      - It's in c++-mode and
      - .clang-format exists in parent directories and
      - .no-clang-format does *not* exist in parent directories."
    (when (and do-clang-format-buffer-on-save (eq major-mode 'c++-mode))
      (let ((clang-format-root (find-file-in-parents ".clang-format"))
	    (no-clang-format-root (find-file-in-parents ".no-clang-format")))
	(cond (no-clang-format-root nil)
	      (clang-format-root
	       (clang-format-buffer))))))

  (add-hook 'before-save-hook
	    #'run-clang-format-if-c++-mode-before-save-hook)
#+END_SRC
** Bazel
#+BEGIN_SRC emacs-lisp
  (use-package bazel-mode
      :ensure nil
      :init
      (setq bazel-mode-buildifier-before-save t)
      :mode (("\\.bazel\\'"  . bazel-mode)
	     ("\\.bzl\\'" . bazel-mode)
	     ("WORKSPACE\\'"  . bazel-mode)))
  (require 'bazel-mode)
  (require 'bazel-build)
#+END_SRC
** SMT2
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (cons '("\\.smt2$" . lisp-mode) auto-mode-alist))
  (use-package lispy)
#+END_SRC
** Python
From https://realpython.com/emacs-the-best-python-editor/
#+BEGIN_SRC emacs-lisp
  (use-package py-isort)
  (use-package elpy
    :hook (elpy-mode . flycheck-mode)
  )
  (elpy-enable)
  (setq elpy-rpc-python-command "python3")
  (setq python-shell-interpreter "python3")
  (use-package yapfify)
#+END_SRC
* LaTeX / AucTeX
#+BEGIN_SRC emacs-lisp
  (use-package latex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;;set up AUCTeX to deal with multiple file documents.
    (setq-default TeX-master nil)
    ;; (setq-default TeX-master nil)
    (add-to-list 'TeX-command-list
		 '("LaTeXMK"
		   "latexmk -pvc -CF -bibtex -pdf %s"
		   TeX-run-TeX nil t) t)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(company-mode)
		(turn-on-reftex)
		(setq reftex-plug-into-AUCTeX t)
		(reftex-isearch-minor-mode)
		(setq TeX-PDF-mode t)
		(setq TeX-source-correlate-method 'synctex)
		(setq TeX-source-correlate-start-server t)
		(setq TeX-command-default "LaTeXMK")
		))

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
	      #'TeX-revert-document-buffer)

    ;; Setup skim for Mac.
    (when (string= system-type "darwin")
      (progn
	;; Default Viewer = Skim
	;; Note: In Skim > Preference > Sync : Choose Custom preset and set "/usr/local/bin/emacsclient" as command!
	(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
	(setq TeX-view-program-list
	      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
	)
      )
    )
#+END_SRC

* rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  ;; Projectile - Project interaction library
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
* W3M
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :commands (w3m-browse-url w3m-find-file)
    :bind
    (:map w3m-mode-map
	  ("C-n"  . w3m-next-anchor)
	  ("C-p"  . w3m-previous-anchor)
	  ([up]   . previous-line)
	  ([down] . next-line)))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  ;; Directory operations
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
	   ("C-c C-p" . wdired-change-to-wdired-mode))
    :config
    ;; Always delete and copy recursively
    (setq dired-recursive-deletes 'always
	  dired-recursive-copies 'always)

    (when sys/macp
      ;; Suppress the warning: `ls does not support --dired'.
      (setq dired-use-ls-dired nil)

      (when (executable-find "gls")
	;; Use GNU ls as `gls' from `coreutils' if available.
	(setq insert-directory-program "gls")))

    (when (or (and sys/macp (executable-find "gls"))
	      (and (not sys/macp) (executable-find "ls")))
      ;; Using `insert-directory-program'
      (setq ls-lisp-use-insert-directory-program t)

      ;; Show directory first
      (setq dired-listing-switches "-alh --group-directories-first")

      ;; Quick sort dired buffers via hydra
      (use-package dired-quick-sort
	:bind (:map dired-mode-map
	       ("S" . hydra-dired-quick-sort/body))))

    ;; Allow rsync from dired buffers
    (use-package dired-rsync
      :bind (:map dired-mode-map
	     ("C-c C-r" . dired-rsync)))

    ;; Colourful dired
    (use-package diredfl
      :init (diredfl-global-mode 1))

    ;; Shows icons
    (use-package all-the-icons-dired
      :diminish
      :functions (dired-move-to-filename
		  dired-get-filename
		  my-all-the-icons-dired--display)
      :commands all-the-icons-dired--display
      :custom-face (all-the-icons-dired-dir-face ((t (:foreground nil))))
      :hook (dired-mode . all-the-icons-dired-mode)
      :config
      (declare-function all-the-icons-octicon 'all-the-icons)
      (declare-function all-the-icons-match-to-alist 'all-the-icons)
      (declare-function all-the-icons-dir-is-submodule 'all-the-icons)
      (defun my-all-the-icons-dired--display ()
	"Display the icons of files without colors in a dired buffer."
	(when dired-subdir-alist
	  (let ((inhibit-read-only t)
		(remote-p (and (fboundp 'tramp-tramp-file-p)
			       (tramp-tramp-file-p default-directory))))
	    (save-excursion
	      ;; TRICK: Use TAB to align icons
	      (setq-local tab-width 1)
	      (goto-char (point-min))
	      (while (not (eobp))
		(when (dired-move-to-filename nil)
		  (insert " ")
		  (let ((file (dired-get-filename 'verbatim t)))
		    (unless (member file '("." ".."))
		      (let ((filename (file-local-name (dired-get-filename nil t))))
			(if (file-directory-p filename)
			    (let ((icon (cond
					 (remote-p
					  (all-the-icons-octicon "file-directory"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((file-symlink-p filename)
					  (all-the-icons-octicon "file-symlink-directory"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((all-the-icons-dir-is-submodule filename)
					  (all-the-icons-octicon "file-submodule"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((file-exists-p (format "%s/.git" filename))
					  (all-the-icons-octicon "repo"
								 :height 1.1
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 (t (let ((matcher (all-the-icons-match-to-alist
							    file all-the-icons-dir-icon-alist)))
					      (apply (car matcher)
						     (list (cadr matcher)
							   :face 'all-the-icons-dired-dir-face
							   :v-adjust all-the-icons-dired-v-adjust)))))))
			      (insert icon))
			  (insert (all-the-icons-icon-for-file file :v-adjust all-the-icons-dired-v-adjust))))
		      (insert "\t "))))   ; Align and keep one space for refeshing after operations
		(forward-line 1))))))
      (advice-add #'all-the-icons-dired--display :override #'my-all-the-icons-dired--display))

    ;; Extra Dired functionality
    (use-package dired-aux :ensure nil)
    (use-package dired-x
      :ensure nil
      :demand
      :config
      (let ((cmd (cond
		  (sys/mac-x-p "open")
		  (sys/linux-x-p "xdg-open")
		  (sys/win32p "start")
		  (t ""))))
	(setq dired-guess-shell-alist-user
	      `(("\\.pdf\\'" ,cmd)
		("\\.docx\\'" ,cmd)
		("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
		("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
		("\\.\\(?:xcf\\)\\'" ,cmd)
		("\\.csv\\'" ,cmd)
		("\\.tex\\'" ,cmd)
		("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
		("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
		("\\.html?\\'" ,cmd)
		("\\.md\\'" ,cmd))))

      (setq dired-omit-files
	    (concat dired-omit-files
		    "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*\\|^bazel-*"))))

  ;; `find-dired' alternative using `fd'
  (when (executable-find "fd")
    (use-package fd-dired))
#+END_SRC
* Fin
#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
#+END_SRC
